import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import javax.swing.JOptionPane;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.canvas.GraphicsContext;

public class HangmanController {

	final int LETTERS  = 26;
	
    @FXML
    private Canvas canv;

    @FXML
    private Label guesses;

    @FXML
    private ComboBox<Character> letters;

    @FXML
    private Label rightLetters;
    
	private GraphicsContext gc;


	private ArrayList<String> hangmanLives = new ArrayList<String>(Arrays.asList(
			"\n"
			+"			 +------+\n"
			+ "			 |	|\n"
			+ "			 	|\n"
			+ "			 	|\n"
			+ "			 	|\n"
			+ "			 	|\n"
			+ "			==========\n",
			"\n"
			+"			 +------+\n"
			+ "			 |	|\n"
			+ "			O	|\n"
			+ "			 	|\n"
			+ "			 	|\n"
			+ "			 	|\n"
			+ "			==========\n",
			"\n"
			+"			 +------+\n"
			+ "			 |	| \n"
			+ "			O	| \n"
			+ "		     	 |	 \n"
			+ "			 	| \n"
			+ "			 	| \n"
			+ "			==========\n",
			"\n"
			+"			 +------+\n"
			+ "			 |	| \n"
			+ "			O	| \n"
			+ "		      --|	 \n"
			+ "			 	| \n"
			+ "			 	| \n"
			+ "			==========\n",
			"\n"
			+"			 +------+\n"
			+ "			 |	| \n"
			+ "			O	| \n"
			+ "		      --|-- \n"
			+ "			     \n"
			+ "			 	| \n"
			+ "			==========\n",
			"\n"
			+"			 +------+\n"
			+ "			 |	| \n"
			+ "			O	| \n"
			+ "		      --|-- \n"
			+ "			/    \n"
			+ "			 	| \n"
			+ "			==========\n",
			"\n"
			+"			 +------+\n"
			+ "			 |	| \n"
			+ "			O	| \n"
			+ "		      --|-- \n"
			+ "			/ \\   \n"
			+ "			 	| \n"
			+ "			==========\n"
			
			));

	
	private Game game;

	@FXML
	public void initialize() {
		gc = canv.getGraphicsContext2D();

		game = new Game();
		
		game.setRandomWord(createSecretWord());
		System.out.println("game.getRandomWord : " + game.getRandomWord());
		
		gc.fillText(hangmanLives.get(game.getNumOfGuesses()), 0, 0);
		
		for(int j = 0; j < game.getRandomWord().length();j++)
    	{
    		game.setRevealWord(game.getRevealWord() + '_');
    	}

		rightLetters.setText(game.getRevealWord());
		
		initCombobox();
	}

    @FXML
    void guessPressed(ActionEvent event) {
    	if(letters.getSelectionModel().isEmpty() == true)
    	{
			JOptionPane.showMessageDialog(null, "You must choose letter!");
    	}
    	else
    	{
    		if(game.getNumOfGuesses() > 5)
        	{
    			JOptionPane.showMessageDialog(null, "You lost!");
        	}
        	else
        	{
        		if( !(game.getRevealWord().equals(game.getRandomWord())))
        		{
        			game.setRevealWord(drawLetterInWord(game.getRandomWord(),letters.getValue(),game.getRevealWord())); 
                	
        			rightLetters.setText(game.getRevealWord());
        			
        			if(game.getRevealWord().equals(game.getRandomWord()))
            		{
            			JOptionPane.showMessageDialog(null, "You Won!");
            		}

                	game.getGuesseArray().add(letters.getValue());
                	String stringOfGuesses = "";

                	for(int i = 0 ; i < game.getGuesseArray().size() ;i++)
                	{
                		stringOfGuesses += " " +   game.getGuesseArray().get(i);
                	}
                		
            		guesses.setText(stringOfGuesses);
            		gc.fillText(hangmanLives.get(game.getNumOfGuesses()), 0, 0);
            		updateCombobox(letters.getValue());
        		}
        	}
    	}
    }
	private void updateCombobox(char letter)
	{
    	for(int i = 0; i< letters.getItems().size();i++)
    	{
    		if( letter == letters.getItems().get(i) )
    			letters.getItems().remove(i);
    	}
	}
    
    @FXML
    void resetPressed(ActionEvent event) {
    	game.setNumOfGuesses(0);
    	
    	gc.clearRect(0,0 , 460, 120);
		gc.fillText(hangmanLives.get(game.getNumOfGuesses()), 0, 0);

		String randomWord = createSecretWord();
    	game.setRandomWord(randomWord);
 
	    System.out.println("randomWord : " + randomWord);
	    
	    game.setRevealWord("");
		for(int j = 0; j < game.getRandomWord().length();j++)
    	{
    		game.setRevealWord(game.getRevealWord() + '_');
    	}
    	
		rightLetters.setText(game.getRevealWord());
    	guesses.setText('-' + "");
    	
    	game.getGuesseArray().clear();
    	initCombobox();
    }

	private String drawLetterInWord(String secretWord , char letter , String revealWord)
	{
		int foundLetterFlag = 0; // 0 = not found a signal letter  , 1 = found one letter

    	for(int i = 0; i < secretWord.length();i++)
    	{
    		if(secretWord.charAt(i) == letter)
    		{
    			foundLetterFlag = 1;
    			game.setRevealWord( game.getRevealWord().substring(0,i) + letter + game.getRevealWord().substring(i+1,secretWord.length()) );
    		}
    	}
    	if ( foundLetterFlag == 0)
    	{
    		game.setNumOfGuesses(game.getNumOfGuesses() + 1);
    	}

    	return game.getRevealWord();
	} 
	
	private void initCombobox() 
	{
		letters.getItems().clear();
    	char letter = 'a';
    	for(int i = 0; i< LETTERS;i++)
    	{
    		letters.getItems().add(letter);
    		letter += 1;
    	}
    	letters.setValue('a');
	}
	
    private String createSecretWord()
    {
		Random rand = new Random();
    	List<String> words = new ArrayList<String>();
		String[] wordsLine;
		String secretWord = new String();

		try
		{
			FileReader fr = new FileReader("words.txt");
			BufferedReader reader = new BufferedReader(fr);
			String line = reader.readLine();
			while(line != null) 
			{
		        wordsLine = line.split(" ");
		        for(String word : wordsLine) {
		            words.add(word);
		        }
		        line = reader.readLine();
			}
			fr.close();
		}
		catch(IOException e)
		{
			System.out.println("Error");
		}

		secretWord = words.get(rand.nextInt(words.size()));
		return secretWord;
    }
}
