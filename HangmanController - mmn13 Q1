import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import javax.swing.JOptionPane;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.canvas.GraphicsContext;

public class HangmanController {

    @FXML
    private Canvas canv;

    @FXML
    private Label guesses;

    @FXML
    private ComboBox<Character> letters;

    @FXML
    private Label rightLetters;
    
	private GraphicsContext gc;

	private ArrayList<Character> guesseArray;
	private String randomWord;
	private String revealWord;
	private int numOfGuesses;
	
	private ArrayList<String> hangmanLives = new ArrayList<String>(Arrays.asList(
			"\n"+
			"			 +------+\n"
			+ "			 |	|\n"
			+ "			 	|\n"
			+ "			 	|\n"
			+ "			 	|\n"
			+ "			 	|\n"
			+ "			==========\n",
			"\n"+
			"			 +------+\n"
			+ "			 |	|\n"
			+ "			 O	|\n"
			+ "			 |	|\n"
			+ "				|\n"
			+ "			 	|\n"
			+ "			==========\n"
					,
			"\n"+
			"			 +------+\n"
			+ "			 |	|\n"
			+ "			 O	|\n"
			+ "			-|	|\n"
			+ "				|\n"
			+ "			 	|\n"
			+ "			==========\n"
					,
			"\n"+
			"			 +------+\n"
			+ "			 |	|\n"
			+ "			 O	|\n"
			+ "			-|-	|\n"
			+ "				|\n"
			+ "			 	|\n"
			+ "			==========\n"
					,
			"\n"+
			"			 +------+\n"
			+ "			 |	|\n"
			+ "			 O	|\n"
			+ "			-|-	|\n"
			+ "			/	|\n"
			+ "			 	|\n"
			+ "			==========\n"
					,
			"\n"+
			"			 +------+\n"
			+ "			 |	|\n"
			+ "			 O	|\n"
			+ "			-|-	|\n"
			+ "			/ \\	|\n"
			+ "			 	|\n"
			+ "			==========\n"
			
			));

	

	@FXML
	public void initialize() {
		gc = canv.getGraphicsContext2D();
		numOfGuesses = 0;
		randomWord = createSecretWord();
	    System.out.println("randomWord : " + randomWord);

		gc.fillText(hangmanLives.get(numOfGuesses), 0, 0);
		
		revealWord = new String();

    	for(int j = 0; j < randomWord.length();j++)
    	{
    		revealWord+= '_';
    	}
    	
    	rightLetters.setText(revealWord);
		
		guesseArray = new ArrayList<Character>();
		initCombobox();
	}

    @FXML
    void guessPressed(ActionEvent event) {
    	if (numOfGuesses > 4)
		{
			JOptionPane.showMessageDialog(null, "You lost!");
		}
    	else
    	{
        	revealWord = drawLetterInWord(randomWord , letters.getValue(),revealWord);
        	rightLetters.setText(revealWord);
        	
        	guesseArray.add(letters.getValue());

        	String stringOfGuesses = "";
        	for(int i = 0 ; i < guesseArray.size() ;i++)
        	{
        		stringOfGuesses += " " +  guesseArray.get(i);
        	}
        			
    		guesses.setText(stringOfGuesses);
    		
    		gc.fillText(hangmanLives.get(numOfGuesses), 0, 0);
    		
    	}
    
		/*String msg;

		if(revealWord.compareTo(randomWord) == 0)
		{
			msg = JOptionPane.showInputDialog("You Won! , Would you like to start over?")
		}
		if (msg == "yes" || msg == "Yes" )
		{
			
		}*/
    }
    
    @FXML
    void resetPressed(ActionEvent event) {
		numOfGuesses = 0;
    	gc.clearRect(0,0 , 460, 120);
		gc.fillText(hangmanLives.get(numOfGuesses), 0, 0);
		randomWord = createSecretWord();
	    System.out.println("randomWord : " + randomWord);
	    revealWord = "";
    	for(int j = 0; j < randomWord.length();j++)
    	{
    		revealWord+= '_';
    	}
    	
    	rightLetters.setText(revealWord);
    	guesses.setText('-' + "");
    	
    	guesseArray.clear();
    	

    }

	private String drawLetterInWord(String secretWord , char letter , String revealWord)
	{
		int foundLetterFlag = 0; // 0 = not found a signal letter  , 1 = found one letter

    	for(int i = 0; i < secretWord.length();i++)
    	{
    		if(secretWord.charAt(i) == letter)
    		{
    			foundLetterFlag = 1;
    			revealWord = revealWord.substring(0,i) + letter + revealWord.substring(i+1,secretWord.length()) ;
    		}
    	}
    	if ( foundLetterFlag == 0)
    	{
    		numOfGuesses += 1;
    	}
    	return revealWord;
	} 
   
	public void initCombobox() {
    	final int LETTERS  = 26 ;
    	char letter = 'a';
    	for(int i = 0; i< LETTERS;i++)
    	{
    		letters.getItems().add(letter);
    		letter += 1;
    	}
    	letters.setValue('a');
	}
	
    private String createSecretWord()
    {
		Random rand = new Random();
    	List<String> words = new ArrayList<String>();
		String[] wordsLine;
		String secretWord = new String();

		try
		{
			FileReader fr = new FileReader("words.txt");
			BufferedReader reader = new BufferedReader(fr);
			String line = reader.readLine();
			while(line != null) 
			{
		        wordsLine = line.split(" ");
		        for(String word : wordsLine) {
		            words.add(word);
		        }
		        line = reader.readLine();
			}
			fr.close();
		}
		catch(IOException e)
		{
			System.out.println("Error");
		}

		secretWord = words.get(rand.nextInt(words.size()));
		return secretWord;
    }
    
	

	
}
