import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

import javax.swing.JOptionPane;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;

public class TriviaController {

    @FXML
    private Button geography;

    @FXML
    private Button history;

    @FXML
    private RadioButton option1;

    @FXML
    private RadioButton option2;

    @FXML
    private RadioButton option3;

    @FXML
    private RadioButton option4;

    @FXML
    private ToggleGroup options;

    @FXML
    private Button science;

    @FXML
    private Label showQuestion;

    @FXML
    private Button submit;
   
    //The topic the user wants to get questions about
    private String chosenTopic;
    private QuestionsRepository repositoryQues;
    private int randomIndexQuestion;
    private int score;
    

    @FXML
	public void initialize() {
		repositoryQues = new QuestionsRepository();
		score = 0;
		
		importQuestionsFromText();
		
		showQuestion.setText("Choose one from the catcagroy below to get start");
		option1.setText("-");
		option2.setText("-");
		option3.setText("-");
		option4.setText("-");	
	}

    private void importQuestionsFromText()
    {
		String st = new String();
		String question = "";
		int i = 0;
		score = 0;
		String correctAnswer = new String();
		Question quest;
		String topic = "";
		
		String answersArray[] = new String[4];
		for(int k = 0; k <answersArray.length;k++ ){
			answersArray[k] = "";
		}
		
    	try
		{
			Scanner input = new Scanner(new File("triva.txt"));
			while(input.hasNext())
			{
				st = input.next();
								
				switch(i)
				{
					case 0 : 
						topic = st;
						break;
					case 1:
						question += st + " ";
						break;
					case 2:
						answersArray[0] += st + " ";
						break;
					case 3:
						answersArray[1] += st + " ";
						break;
					case 4:
						answersArray[2] += st + " ";
						break;
					case 5:
						answersArray[3] += st + " ";
						break;
					
				}
				if(st.charAt(st.length()-1) == '?')
				{
					i++;
				}
				if(st.charAt(st.length()-1) == '.')
					i++;
				
				if (i == 6)
				{
					correctAnswer = answersArray[0];
					suffleArray(answersArray);
					quest = new Question(question, answersArray[0], answersArray[1], answersArray[2],answersArray[3], correctAnswer);

					if(topic.equals("science."))
					{
						repositoryQues.getScienceQuestion().add(quest);
					}
					else if(topic.equals("geography.") )
					{
						repositoryQues.getGeographyQuestion().add(quest);
					}
					else if(topic.equals("history."))
					{
						repositoryQues.getHistoryQuestion().add(quest);
					}
					
					i = 0;
					question = "";
					for(int k = 0; k <answersArray.length;k++ )
					{
						answersArray[k] = "";
					}
				}	
			}
			input.close();
		}
		catch(IOException e)
		{
			System.out.println("Error" );
		}
    }
    
    private void checkingAnswer(ArrayList<Question> list)
    {
    	if(option1.isSelected())
		{
			if(option1.getText().equals(list.get(randomIndexQuestion).getCorrectAnswer())  )
			{
		    	JOptionPane.showMessageDialog(null, "Good Job!");
		    	score += 10;
			}
			else
			{
		    	JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(randomIndexQuestion).getCorrectAnswer());
		    	score -= 5;
			}

		}
    	else if(option2.isSelected())
		{
			if(option2.getText().equals(list.get(randomIndexQuestion).getCorrectAnswer())  )
			{
			    JOptionPane.showMessageDialog(null, "Good Job!");
			    score += 10;
			}
			else
			{
			    JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(randomIndexQuestion).getCorrectAnswer());
			    score -= 5;
			}
		}
    	else if(option3.isSelected())
		{
			if(option3.getText().equals(list.get(randomIndexQuestion).getCorrectAnswer())  )
			{
			    JOptionPane.showMessageDialog(null, "Good Job!");
			    score += 10;
			}
			else
			{
			    JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(randomIndexQuestion).getCorrectAnswer());
			    score -= 5;
			}
		}
       	else 
    	{
    		if(option4.getText().equals(list.get(randomIndexQuestion).getCorrectAnswer())  )
    		{
    			JOptionPane.showMessageDialog(null, "Good Job!");
    			score += 10;
    		}
    		else
    		{
    		    JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(randomIndexQuestion).getCorrectAnswer());
    			score -= 5;
    		}
    	}
    	
    	list.remove(randomIndexQuestion);
		nextQuestion(list );
    }

    
    
    @FXML
    void answerPressed(ActionEvent event) {
    	if( !(option1.isSelected()) && !(option2.isSelected()) && !(option3.isSelected()) && !(option4.isSelected()))
    	{
    		JOptionPane.showMessageDialog(null, "You must choose one option!");
    	}
    	else
    	{
    		if(chosenTopic.equals("Science"))
    		{
    			checkingAnswer(repositoryQues.getScienceQuestion());
    		}
    		else if(chosenTopic.equals("Geography"))
    		{
    			checkingAnswer(repositoryQues.getGeographyQuestion());
    		}
    		else if(chosenTopic.equals("History"))
    		{
    			checkingAnswer(repositoryQues.getHistoryQuestion());
    		}
    	}
    }
    
    
    private void nextQuestion(ArrayList<Question>  arr) {

    	if(arr.size()> 0)
    	{
        	Random rand = new Random();
        	randomIndexQuestion = rand.nextInt(arr.size());
        	showQuestion.setText(arr.get(randomIndexQuestion).getQuestion());
    		option1.setText(arr.get(randomIndexQuestion).getAnswer1());
    		option2.setText(arr.get(randomIndexQuestion).getAnswer2());
    		option3.setText(arr.get(randomIndexQuestion).getAnswer3());
    		option4.setText(arr.get(randomIndexQuestion).getAnswer4());
    	}
    	else
    	{
    		JOptionPane.showMessageDialog(null, "Very Well, the quiz is over!\n Your score is : " + score +"\nfor trying another categoria question  please press on another category below\nfor starting new game please press on the new-game button");
    	}
	}
    
    

    @FXML
    void geographyPressed(ActionEvent event) {
    	
    	if(repositoryQues.getGeographyQuestion().size() == 0)
    	{
    		JOptionPane.showMessageDialog(null, "There is no Geography questions left!");
    	}
    	else
    	{
    		chosenTopic = geography.getText();
    		initQuestion(repositoryQues.getGeographyQuestion());

    	}
    }
    

    @FXML
    void historyPressed(ActionEvent event) {
    	if(repositoryQues.getHistoryQuestion().size() == 0)
    	{
    		JOptionPane.showMessageDialog(null, "There is no History questions left!");
    	}
    	else
    	{
        	chosenTopic = history.getText();
        	initQuestion(repositoryQues.getHistoryQuestion());
    	}

    }

    @FXML
    void sciencePressed(ActionEvent event) {
    	if(repositoryQues.getScienceQuestion().size() == 0)
    	{
    		JOptionPane.showMessageDialog(null, "There is no Science questions left!");
    	}
    	else
    	{
        	chosenTopic = science.getText();
    		initQuestion(repositoryQues.getScienceQuestion());
    	}

    }
    
    
    private void initQuestion(ArrayList<Question>  arr) {
    	Random rand = new Random();
    	randomIndexQuestion = rand.nextInt(arr.size());
    	showQuestion.setText(arr.get(randomIndexQuestion).getQuestion());
		option1.setText(arr.get(randomIndexQuestion).getAnswer1());
		option2.setText(arr.get(randomIndexQuestion).getAnswer2());
		option3.setText(arr.get(randomIndexQuestion).getAnswer3());
		option4.setText(arr.get(randomIndexQuestion).getAnswer4());
	}
    
    @FXML
    void resetPressed(ActionEvent event) {
    	importQuestionsFromText();
    	score = 0;
    	
		showQuestion.setText("Choose one from the catcagroy below to get start");
		option1.setText("-");
		option2.setText("-");
		option3.setText("-");
		option4.setText("-");	
    }
    
    @FXML
    void finishPressed(ActionEvent event) {

    }
    
	private static void suffleArray(String arr[]) {
		
		Random rand = new Random();
		int randomIndexToSwap ;
		String temp;
		for (int j = 0; j < arr.length; j++) {
			randomIndexToSwap =rand.nextInt(arr.length );
			temp = arr[randomIndexToSwap];
			arr[randomIndexToSwap] = arr[j];
			arr[j] = temp;
		}
		
	}

}
