import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

import javax.swing.JOptionPane;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;

public class TriviaController {

    @FXML
    private Label feedback;
    
    @FXML
    private Button geography;

    @FXML
    private Button history;

    @FXML
    private RadioButton option1;

    @FXML
    private RadioButton option2;

    @FXML
    private RadioButton option3;

    @FXML
    private RadioButton option4;

    @FXML
    private ToggleGroup options;

    @FXML
    private Button science;

    @FXML
    private Label showQuestion;

    @FXML
    private Button submit;

    private Game game;
    
    @FXML
	public void initialize() {
    	
    	game = new Game();
    	
		//repositoryQues = new QuestionsRepository();

		//score = 0;
		
		importQuestionsFromText();
		
		/*System.out.println("size science : " +game.getRepositoryQues().getScienceQuestion().size());
		System.out.println("size geography : " +game.getRepositoryQues().getGeographyQuestion().size());
		System.out.println("size history : " +game.getRepositoryQues().getHistoryQuestion().size());*/

		showQuestion.setText("Choose one from the catcagroy below to get start");
		option1.setText("-");
		option2.setText("-");
		option3.setText("-");
		option4.setText("-");	
	}

    private void importQuestionsFromText()
    {
		String st = new String();
		String question = "";
		int i = 0;
		//score = 0;
		String correctAnswer = new String();
		Question quest;
		String topic = "";
		
		String answersArray[] = new String[4];
		for(int k = 0; k <answersArray.length;k++ ){
			answersArray[k] = "";
		}
		
    	try
		{
			Scanner input = new Scanner(new File("triva.txt"));
			while(input.hasNext())
			{
				st = input.next();	
				switch(i)
				{
					case 0 : 
						topic = st;
						break;
					case 1:
						question += st + " ";
						break;
					case 2:
						answersArray[0] += st + " ";
						break;
					case 3:
						answersArray[1] += st + " ";
						break;
					case 4:
						answersArray[2] += st + " ";
						break;
					case 5:
						answersArray[3] += st + " ";
						break;
				}
				if(st.charAt(st.length()-1) == '?')
					i++;
				
				if(st.charAt(st.length()-1) == '.')
					i++;
				
				if (i == 6)
				{
					correctAnswer = answersArray[0];
					suffleArray(answersArray);
					quest = new Question(question, answersArray[0], answersArray[1], answersArray[2],answersArray[3], correctAnswer);

					if(topic.equals("science."))
					{
						//repositoryQues.getScienceQuestion().add(quest);
						game.getRepositoryQues().getScienceQuestion().add(quest);
					}
					else if(topic.equals("geography.") )
					{
						//repositoryQues.getGeographyQuestion().add(quest);
						game.getRepositoryQues().getGeographyQuestion().add(quest);
					}
					else if(topic.equals("history."))
					{
						//repositoryQues.getHistoryQuestion().add(quest);
						game.getRepositoryQues().getHistoryQuestion().add(quest);
					}
					i = 0;
					question = "";
					for(int k = 0; k <answersArray.length;k++ )
					{
						answersArray[k] = "";
					}
				}	
			}
			input.close();
		}
		catch(IOException e)
		{
			System.out.println("Error" );
		}
    }
    
    private void checkingAnswer(ArrayList<Question> list)
    {
    	if(option1.isSelected())
		{
			//if(option1.getText().equals(list.get(randomIndexQuestion).getCorrectAnswer())  )
    		if(option1.getText().equals(list.get(game.getRandomIndexQuestion()).getCorrectAnswer())  )
			{
		    	//JOptionPane.showMessageDialog(null, "Correct!");
		    	feedback.setText("Correct!");
    			//score += 10;
		    	game.setScore(game.getScore() + 10);
			}
			else
			{
		    	//JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(randomIndexQuestion).getCorrectAnswer());
		    	//JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(game.getRandomIndexQuestion()).getCorrectAnswer());
		    	feedback.setText("Not correct! ,The right answer is :" + list.get(game.getRandomIndexQuestion()).getCorrectAnswer());
		    	
				//score -= 5;
		    	game.setScore(game.getScore() - 5);
			}

		}
    	else if(option2.isSelected())
		{
			//if(option2.getText().equals(list.get(randomIndexQuestion).getCorrectAnswer())  )
    		if(option2.getText().equals(list.get(game.getRandomIndexQuestion()).getCorrectAnswer())  )
			{
			    //JOptionPane.showMessageDialog(null, "Correct!");
		    	feedback.setText("Correct!");


			    
			    //score += 10;
			    game.setScore(game.getScore() + 10);
			}
			else
			{
			    //JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(randomIndexQuestion).getCorrectAnswer());
			    //JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(game.getRandomIndexQuestion()).getCorrectAnswer());
		    	feedback.setText("Not correct! ,The right answer is :" + list.get(game.getRandomIndexQuestion()).getCorrectAnswer());

				//score -= 5;
			    game.setScore(game.getScore() - 5);
			}
		}
    	else if(option3.isSelected())
		{
			//if(option3.getText().equals(list.get(randomIndexQuestion).getCorrectAnswer())  )
			if(option3.getText().equals(list.get(game.getRandomIndexQuestion()).getCorrectAnswer())  )

    		{
			    //JOptionPane.showMessageDialog(null, "Correct!");
		    	feedback.setText("Correct!");

			    //score += 10;
			    game.setScore(game.getScore() + 10);
			}
			else
			{
			   //JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(randomIndexQuestion).getCorrectAnswer());
			    //JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(game.getRandomIndexQuestion()).getCorrectAnswer());
		    	feedback.setText("Not correct! ,The right answer is :" + list.get(game.getRandomIndexQuestion()).getCorrectAnswer());

				//score -= 5;
			    game.setScore(game.getScore() - 5);
			}
		}
       	else if(option4.isSelected())
    	{
    		//if(option4.getText().equals(list.get(randomIndexQuestion).getCorrectAnswer())  )
    		if(option4.getText().equals(list.get(game.getRandomIndexQuestion()).getCorrectAnswer())  )

       		{
    			//JOptionPane.showMessageDialog(null, "Correct!");
		    	feedback.setText("Correct!");
    			//score += 10;
    			game.setScore(game.getScore() + 10);
    		}
    		else
    		{
    		    //JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(randomIndexQuestion).getCorrectAnswer());
    		    //JOptionPane.showMessageDialog(null, "Not correct! \nThe right answer is :" + list.get(game.getRandomIndexQuestion()).getCorrectAnswer());
		    	feedback.setText("Not correct! ,The right answer is :" + list.get(game.getRandomIndexQuestion()).getCorrectAnswer());

    			//score -= 5;
    		    game.setScore(game.getScore() - 5);
    		}
    	}
    	
    	//list.remove(randomIndexQuestion);
    	list.remove(game.getRandomIndexQuestion());
		nextQuestion(list );
    }

    
    
    @FXML
    void answerPressed(ActionEvent event) {
    	if( !(option1.isSelected()) && !(option2.isSelected()) && !(option3.isSelected()) && !(option4.isSelected()))
    	{
    		//JOptionPane.showMessageDialog(null, "You must choose one option!");
    		feedback.setText("You must choose one option!");
    	}
    	else
    	{
    		//if(chosenTopic.equals("Science"))
    		if(game.getChosenTopic().equals("Science"))
    		{
    			//if(repositoryQues.getScienceQuestion().size() == 0)
    			if(game.getRepositoryQues().getScienceQuestion().size() == 0)
    			{
    	    		//JOptionPane.showMessageDialog(null, "No question left!");
    	    		feedback.setText("No question left!");
    			}
    
    			else
    				checkingAnswer(game.getRepositoryQues().getScienceQuestion());
        			//checkingAnswer(repositoryQues.getScienceQuestion());
    			
    		}
    		//else if(chosenTopic.equals("Geography"))
    		else if(game.getChosenTopic().equals("Geography"))
    		{
    			//if(repositoryQues.getGeographyQuestion().size() == 0)
        		if(game.getRepositoryQues().getGeographyQuestion().size() == 0)
    			{
    	    		//JOptionPane.showMessageDialog(null, "No question left!");
    	    		feedback.setText("No question left!");

    			}
    			else
    				checkingAnswer(game.getRepositoryQues().getGeographyQuestion());
    				//checkingAnswer(repositoryQues.getGeographyQuestion());
    		}
    		//else if(chosenTopic.equals("History"))
    		else if(game.getChosenTopic().equals("History"))
    		{
    			//if(repositoryQues.getHistoryQuestion().size() == 0)
        		if(game.getRepositoryQues().getHistoryQuestion().size() == 0)
    			{
    	    		//JOptionPane.showMessageDialog(null, "No question left!");
    	    		feedback.setText("No question left!");

    			}
    			else
    				checkingAnswer(game.getRepositoryQues().getHistoryQuestion());
        			//checkingAnswer(repositoryQues.getHistoryQuestion());
    		}
    	}
    }
    
    
    private void nextQuestion(ArrayList<Question>  arr) {

    	if(arr.size()> 0)
    	{
        	Random rand = new Random();
        	//randomIndexQuestion = rand.nextInt(arr.size());
        	game.setRandomIndexQuestion(rand.nextInt(arr.size()));

        	/*showQuestion.setText(arr.get(randomIndexQuestion).getQuestion());
    		option1.setText(arr.get(randomIndexQuestion).getAnswer1());
    		option2.setText(arr.get(randomIndexQuestion).getAnswer2());
    		option3.setText(arr.get(randomIndexQuestion).getAnswer3());
    		option4.setText(arr.get(randomIndexQuestion).getAnswer4());*/
        	showQuestion.setText(arr.get(game.getRandomIndexQuestion()).getQuestion());
    		option1.setText(arr.get(game.getRandomIndexQuestion()).getAnswer1());
    		option2.setText(arr.get(game.getRandomIndexQuestion()).getAnswer2());
    		option3.setText(arr.get(game.getRandomIndexQuestion()).getAnswer3());
    		option4.setText(arr.get(game.getRandomIndexQuestion()).getAnswer4());
    		
    		option1.setSelected(false);
    		option2.setSelected(false);
    		option3.setSelected(false);
    		option4.setSelected(false);
    	}
    	else
    	{
    		/*JOptionPane.showMessageDialog(null, "Very Well, the quiz is over!\nYour score is : " +
    						score +"\nfor trying another categoria question  please press on another category below"
    								+ "\nfor starting new game please press on the new-game button");*/
    	
    		/*showQuestion.setText("Very Well,the quiz is over - no question left!.\nYour score is :" 
    		+ score + "\nfor statring new game press on the button new-game");*/
    		showQuestion.setText("Very Well,the quiz is over - no question left!.\nYour score is :" 
    	    		+ game.getScore() + "\nfor statring new game press on the button new-game");
    		
    		option1.setVisible(false);
    		option2.setVisible(false);
    		option3.setVisible(false);
    		option4.setVisible(false);
    		
    	   	geography.setVisible(false);
        	history.setVisible(false);
        	science.setVisible(false);
    	}
	}
    
    

    @FXML
    void geographyPressed(ActionEvent event) {

		//chosenTopic = geography.getText();
    	game.setChosenTopic(geography.getText());
		//initQuestion(repositoryQues.getGeographyQuestion());
		initQuestion(game.getRepositoryQues().getGeographyQuestion());
		
    	geography.setVisible(false);
    	history.setVisible(false);
    	science.setVisible(false);
    }
    

    @FXML
    void historyPressed(ActionEvent event) {
    	
    	//chosenTopic = history.getText();
    	game.setChosenTopic(history.getText());
    	//initQuestion(repositoryQues.getHistoryQuestion());
    	initQuestion(game.getRepositoryQues().getHistoryQuestion());

    	geography.setVisible(false);
    	history.setVisible(false);
    	science.setVisible(false);

    }

    @FXML
    void sciencePressed(ActionEvent event) {

    	//chosenTopic = science.getText();
    	game.setChosenTopic(science.getText());
    	//initQuestion(repositoryQues.getScienceQuestion());
    	initQuestion(game.getRepositoryQues().getScienceQuestion());

    	geography.setVisible(false);
    	history.setVisible(false);
    	science.setVisible(false);
    }
    
    
    private void initQuestion(ArrayList<Question>  arr) {
    	Random rand = new Random();
    	//randomIndexQuestion = rand.nextInt(arr.size());
    	game.setRandomIndexQuestion(rand.nextInt(arr.size()));
    	/*showQuestion.setText(arr.get(randomIndexQuestion).getQuestion());
		option1.setText(arr.get(randomIndexQuestion).getAnswer1());
		option2.setText(arr.get(randomIndexQuestion).getAnswer2());
		option3.setText(arr.get(randomIndexQuestion).getAnswer3());
		option4.setText(arr.get(randomIndexQuestion).getAnswer4());*/
    	
    	showQuestion.setText(arr.get(game.getRandomIndexQuestion()).getQuestion());
		option1.setText(arr.get(game.getRandomIndexQuestion()).getAnswer1());
		option2.setText(arr.get(game.getRandomIndexQuestion()).getAnswer2());
		option3.setText(arr.get(game.getRandomIndexQuestion()).getAnswer3());
		option4.setText(arr.get(game.getRandomIndexQuestion()).getAnswer4());
	}
    
    @FXML
    void resetPressed(ActionEvent event) {
    	importQuestionsFromText();
    	//score = 0;
    	game.setScore(0);
    	game.setChosenTopic("");
    	feedback.setText("");
    	
    	game.getRepositoryQues().getScienceQuestion().clear();
    	game.getRepositoryQues().getGeographyQuestion().clear();
    	game.getRepositoryQues().getHistoryQuestion().clear();

		importQuestionsFromText();

		showQuestion.setText("Choose one from the catcagroy below to get start");
		option1.setText("-");
		option2.setText("-");
		option3.setText("-");
		option4.setText("-");	
		
		option1.setVisible(true);
		option2.setVisible(true);
		option3.setVisible(true);
		option4.setVisible(true);
		
		option1.setSelected(false);
		option2.setSelected(false);
		option3.setSelected(false);
		option4.setSelected(false);
		
    	geography.setVisible(true);
    	history.setVisible(true);
    	science.setVisible(true);
    }
    
    @FXML
    void finishPressed(ActionEvent event) {
    	
		/*JOptionPane.showMessageDialog(null, "Very Well,the quiz is over on your demand.\nYour score is : " +
				score +"\nfor starting new game please press on the new-game button.");*/
		
		/*showQuestion.setText("Very Well,the quiz is over on your demand.\nYour score is : " 
				+ 	score + "\nfor statring new game press on the button new-game");*/
    	showQuestion.setText("Very Well,the quiz is over on your demand.\nYour score is : " 
				+ 	game.getScore() + "\nfor statring new game press on the button new-game");
    	
		/*option1.setText("-");
		option2.setText("-");
		option3.setText("-");
		option4.setText("-");	*/
    	
    	feedback.setText("");

		option1.setVisible(false);
		option2.setVisible(false);
		option3.setVisible(false);
		option4.setVisible(false);
		
	   	geography.setVisible(false);
    	history.setVisible(false);
    	science.setVisible(false);
    	
    }
    
	private static void suffleArray(String arr[]) {
		
		Random rand = new Random();
		int randomIndexToSwap ;
		String temp;
		for (int j = 0; j < arr.length; j++) {
			randomIndexToSwap =rand.nextInt(arr.length );
			temp = arr[randomIndexToSwap];
			arr[randomIndexToSwap] = arr[j];
			arr[j] = temp;
		}
		
	}

}
