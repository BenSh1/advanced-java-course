
import java.util.ArrayList;
import java.util.Iterator;


public class GenericPriorityQueue<T> {

	//final int NUM_OF_PRIORITIES = 10;
	private int maxPriority;
	private ArrayList<ArrayList<T>> queueOfPriority;
	
	public GenericPriorityQueue(int n)
	{
		this.maxPriority = n;
		this.queueOfPriority = new ArrayList<ArrayList<T>>(n);
		
		// initializing
        for (int i = 0; i < n; i++) {
        	this.queueOfPriority.add(new ArrayList<T>());
        }
		
	}
	
	
	public int getMaxPriority() {
		return maxPriority;
	}

	public void setMaxPriority(int maxPriority) {
		this.maxPriority = maxPriority;
	}

	public ArrayList<ArrayList<T>> getQueueOfPriority() {
		return queueOfPriority;
	}

	public void setQueueOfPriority(ArrayList<ArrayList<T>> queueOfPriority) {
		this.queueOfPriority = queueOfPriority;
	}

	public void add(T item , int priorityItem)
	{
		if(priorityItem > getMaxPriority())
		{
			getQueueOfPriority().get(getMaxPriority()).add(item);
		}
		else
		{
			getQueueOfPriority().get(priorityItem).add(item);

		}
	}
	
	public T poll()
	{
		int i =0;
		while(getMaxPriority() > i && getQueueOfPriority().get(i).size() == 0)
		{
			i++;
		}

		if( i < getMaxPriority())
		{
			T head = getQueueOfPriority().get(i).get(0);
			getQueueOfPriority().get(i).remove(0);

			return head;
		}
		else
			return null;
	}
	
	public Boolean contains(T anotherItem)
	{
		int i = 0;
		int j;
		int equalFlag = 0; // 0 = not find equal item | 1= find equal item

		while(i < getMaxPriority() && equalFlag == 0)
		{
			if(getQueueOfPriority().get(i).size() > 0 )
			{
				j= 0;
				while(j < getQueueOfPriority().get(i).size() && equalFlag == 0)
				{
					if(this.getQueueOfPriority().get(i).get(j).equals(anotherItem))
					{
						equalFlag = 1;
					}
					j++;
				}
			}
			i++;
		}
		
		if(equalFlag == 1)
		{
			return true;
		}
		else
			return false;
	}
	
	public Boolean remove(T anotherItem)
	{
		int i = 0;
		int j;
		int equalFlag = 0; // 0 = not find equal item | 1= find equal item

		while(i < this.getMaxPriority() && equalFlag == 0)
		{
			if(getQueueOfPriority().get(i).size() > 0 )
			{
				j= 0;
				while(j < getQueueOfPriority().get(i).size() && equalFlag == 0)
				{
					if(getQueueOfPriority().get(i).get(j).equals(anotherItem))
					{
						equalFlag = 1;
						getQueueOfPriority().get(i).remove(j);
					}
					j++;
				}
			}
			i++;
		}
		
		if(equalFlag == 1)
		{
			return true;
		}
		else
			return false;
	}
	
	public int size()
	{
		int sum = 0;
		int i = 0;
		while(i < getMaxPriority() )
		{
			sum += getQueueOfPriority().get(i).size();
			i++;
		}
		
		return sum;
	}
	public Iterator iterator()
	{
		return getQueueOfPriority().iterator();
	}
	

	@Override
	public String toString() {
		return "maxPriority=" + this.getMaxPriority() + ", queueOfPriority=" + this.getQueueOfPriority();
	}
	
	
	
}
