import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

import javax.management.Query;

public class GenericPriorityQueue<T> {

	//final int NUM_OF_PRIORITIES = 10;
	
	private int maxPriority;
	private ArrayList<T> queueOfPriority[];
	
	public GenericPriorityQueue(int n)
	{
		this.maxPriority = n;
		//queueOfPriority = (ArrayList<T>[])new ArrayList[n];
		queueOfPriority = new ArrayList[n];
		
		
		// initializing
        for (int i = 0; i < n; i++) {
        	queueOfPriority[i] = new ArrayList<T>();
        }
	}
	
	
	public int getMaxPriority() {
		return maxPriority;
	}

	public void setMaxPriority(int maxPriority) {
		this.maxPriority = maxPriority;
	}

	public ArrayList<T>[] getQueueOfPriority() {
		return queueOfPriority;
	}

	public void setQueueOfPriority(ArrayList<T>[] queueOfPriority) {
		this.queueOfPriority = queueOfPriority;
	}

	public void add(T item , int priorityItem)
	{
		if(priorityItem > this.maxPriority)
		{
			queueOfPriority[maxPriority-1].add(item);
		}
		else
		{
			queueOfPriority[priorityItem].add(item);
		}
	}
	
	public T poll()
	{
		int i =0;
		while(getMaxPriority() > i && getQueueOfPriority()[i].size() == 0)
		{
			i++;
		}

		if( i < getMaxPriority())
		{
			T head = getQueueOfPriority()[i].get(0);
			getQueueOfPriority()[i].remove(0);

			return head;
		}
		else
			return null;
	}
	public Boolean contains(T anotherItem)
	{
		int i = 0;
		int j;
		int equalFlag = 0; // 0 = not find equal item | 1= find equal item

		while(i < this.getMaxPriority() && equalFlag == 0)
		{
			if(this.getQueueOfPriority()[i].size() > 0 )
			{
				j= 0;
				while(j < this.getQueueOfPriority()[i].size() && equalFlag == 0)
				{
					if(this.getQueueOfPriority()[i].get(j).equals(anotherItem))
					{
						equalFlag = 1;
					}
					j++;
				}
			}
			i++;
		}
		
		if(equalFlag == 1)
		{
			return true;
		}
		else
			return false;
	}
	
	
	public Boolean remove(T anotherItem)
	{
		int i = 0;
		int j;
		int equalFlag = 0; // 0 = not find equal item | 1= find equal item

		while(i < this.getMaxPriority() && equalFlag == 0)
		{
			if(this.getQueueOfPriority()[i].size() > 0 )
			{
				j= 0;
				while(j < this.getQueueOfPriority()[i].size() && equalFlag == 0)
				{
					if(this.getQueueOfPriority()[i].get(j).equals(anotherItem))
					{
						equalFlag = 1;
						getQueueOfPriority()[i].remove(j);
					}
					j++;
				}
			}
			i++;
		}
		
		if(equalFlag == 1)
		{
			return true;
		}
		else
			return false;
	}

	public int size()
	{
		int sum = 0;
		for (int i = 0; i < getQueueOfPriority().length; i++) {
			sum += getQueueOfPriority()[i].size();
		}
		
		return sum;
	}
	
	/*public int iterator()
	{
		this.getQueueOfPriority()[0].iterator();
	}*/
	@Override
	public String toString() {
		return "maxPriority = " + this.getMaxPriority() + ", queueOfPriority = "
				+ Arrays.toString(queueOfPriority);
	}
	
	
}
