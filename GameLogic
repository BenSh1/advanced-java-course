import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Random;

public class GameLogic {
	protected final int CORRECTLENGTH = 4;//The length of the sequence of number
	private String numToGuess;
	private int numOfGuessing;
	private ArrayList<String>  historyOfGuessing;
	
	//Constructor - create new secret number to guess, which generated by the method 'createNumber'
	public GameLogic() {
		this.numToGuess = createNumber();
		this.numOfGuessing = 0;
		this.historyOfGuessing = new ArrayList<String>();
	}
	//Getter of the secret number to guess
	public String getNum() 
	{												
		return numToGuess;
	}
	//Getter of the amount of guesses of the user
	public int getNumOfGuessing() 
	{												
		return numOfGuessing;
	}
	//Getter of the user's history of guesses 
	public ArrayList<String> getHistoryOfGuessing() 
	{												
		return historyOfGuessing;
	}
	
	//Checking the user's guess
	public String checkGuess(String guess)
	{
		String message = "";
		int bulls = 0;
		int hits = 0;
		int i;
		String elementToHistory = "";

		//Checking the valid of user's guess , if the message length is greater than 0 then there is problem with the guess
		if(validGuess(guess).length() > 0 ){
			message = validGuess(guess); 
		}
		else //The user's guess is valid
		{
			message = checkHistoryOfElements(guess);//Checking the user's history of guesses 
			//Checking if there is repeat gusses of the user for preventing that ,if the message length is greater than 0 then there is problem with the guess
			if(message.length() == 0)
			{
				this.numOfGuessing++;//Counting the number of guessing
				if(this.numToGuess.contentEquals(guess))//Checking if the guess is equal to sequence of digit that we created
				{
					message= "Very well, you Won! the sequence of digits is : "+ this.getNum() + ", it's took you " 
								+ this.getNumOfGuessing() + " times.";
				}
				else//The guess is valid but not correct so return the number of bulls and hits
				{
					for (i=0; i<CORRECTLENGTH; i++)
					{
						if(this.getNum().charAt(i) == guess.charAt(i)){
							bulls +=1;
						}
						else if(this.getNum().contains("" +guess.charAt(i))){
							hits += 1;
						}
					}
					
					message = "Your history of guesses : " + this.getHistoryOfGuessing() 
					+"\nYour guess is "+ guess +" , has "+ bulls +" Bulls and "
							+ hits +" hits";
					
					elementToHistory = elementToHistory + guess + " bulls: " + bulls + " hits: " + hits + "\n";
					this.historyOfGuessing.add(elementToHistory);//save the guess in the guesses history
				}
			}
		}
		return message;
	}
	//loop through all the elements in the guesses history if there is guesses that the user already guessed so cancel the current guess of the user and send proper message
	private String checkHistoryOfElements(String guess)
	{
		String message = "";
		int i;
		
		for(i = 0; i < this.getHistoryOfGuessing().size(); i++)
		{
			if (this.getHistoryOfGuessing().get(i).substring(0,4).equals(guess))
			{
				message = "You guessed wrong already with this sequence: " + guess + " please try different sequence";
			}
		}
		
		return message;
	}
	
	//Checking if the users guess is valid
	public String validGuess(String guess)
	{
		String message = "";
		int i , j;
		char c;
		int flagError = 0;//for optimization , if there is any invalid part in the guess then no need to check another parts of the guess
		
		if(guess.length() != CORRECTLENGTH)//Checking if the length of the guess is not equal to 4
		{
			message = "Not valid guess! , your guess must to be 4 digit";
			flagError = 1;
		}
		else if(flagError == 0)
		{
			for( i = 0; i < CORRECTLENGTH;i++)//Checking if the guess contain 
			{
				c = guess.charAt(i);
				if(!(c >= '0' && c <= '9') )
				{
					message = "Not valid guess! , your guess must have only numeric characters.";
					flagError = 1;
					break;
				}
				
				for( j = i+1;j < CORRECTLENGTH;j++)
				{
					if(c == guess.charAt(j))
					{
						message = "Not valid guess! , your guess can not have repeat digit.";
						flagError = 1;
						break;
					}
				}
				if(flagError == 1)
				{
					break;
				}

			}
		}

		return message;
		
	}
 
	//Generate sequence of 4 digit for the guessing game
	private String createNumber()
	{
		Random r = new Random();
		String number = "";
		int digit;
		//As long as the number is less than 4 digit create new digit for the guessing game
		while(number.length() < CORRECTLENGTH)
		{
			digit = r.nextInt(10);//Generate new digit from 0 to 9 (include)
			//Checking if the sequence already contains that specific digit for prevent repeated digit
			if(!(number.contains(""+digit)))
				number += digit;
		}
		return number;
	}
	//Reset the sequence of 4 digit for starting new game
	public void reset()
	{
		this.numToGuess = createNumber();
		this.numOfGuessing = 0;
		this.historyOfGuessing.clear();
	}
	

}
